import React from 'react';

const DestructuringGuide = () => {
  return (
    <div style={{ padding: '2rem', fontFamily: 'Segoe UI, sans-serif', lineHeight: '1.8', background: '#f9f9f9' }}>
      <h2 style={{ color: '#4a148c' }}>üîç Destructuring in JavaScript & React ‚Äì Full Guide in Telugu</h2>

      <p>
        <strong>Destructuring</strong> ‡∞Ö‡∞®‡±á‡∞¶‡∞ø Arrays ‡∞≤‡±á‡∞¶‡∞æ Objects ‡∞≤‡±ã‡∞®‡∞ø values ‡∞®‡∞ø individual variables ‡∞ó‡∞æ easy‡∞ó‡∞æ extract ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å.
      </p>
      <p>üëâ ‡∞á‡∞¶‡∞ø code readability & maintainability ‡∞™‡±Ü‡∞Ç‡∞ö‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</p>

      <h3 style={{ color: '#00695c' }}>‚úÖ Basic Syntax:</h3>
      <pre><code>{`const [a, b] = array;
const { name, age } = object;`}</code></pre>

      <h3 style={{ color: '#00695c' }}>1Ô∏è‚É£ Array Destructuring ‚Äì Basic</h3>
      <pre><code>{`const colors = ["red", "green", "blue"];
const [first, second] = colors;
console.log(first); // "red"
console.log(second); // "green"`}</code></pre>
      <p>üëâ Array ‡∞®‡±Å‡∞Ç‡∞°‡∞ø positional ‡∞ó‡∞æ variables assign ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>

      <h3 style={{ color: '#00695c' }}>2Ô∏è‚É£ Skipping Values</h3>
      <pre><code>{`const arr = [1, 2, 3];
const [ , , third] = arr;
console.log(third); // 3`}</code></pre>

      <h3 style={{ color: '#00695c' }}>3Ô∏è‚É£ Object Destructuring ‚Äì Basic</h3>
      <pre><code>{`const person = { name: "Ravi", age: 25 };
const { name, age } = person;
console.log(name); // "Ravi"`}</code></pre>
      <p>üëâ Object keys ‡∞§‡±ã variables extract ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>

      <h3 style={{ color: '#00695c' }}>4Ô∏è‚É£ Renaming While Destructuring</h3>
      <pre><code>{`const user = { id: 101, username: "prasad" };
const { username: name } = user;
console.log(name); // "prasad"`}</code></pre>
      <p>üëâ Object property ‡∞®‡∞ø new variable name ‡∞§‡±ã ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>

      <h3 style={{ color: '#00695c' }}>5Ô∏è‚É£ Nested Destructuring</h3>
      <pre><code>{`const employee = {
  name: "mounika",
  address: {
    city: "Hyderabad",
    pin: 500001
  }
};

const { address: { city } } = employee;
console.log(city); // "Hyderabad"`}</code></pre>

      <h3 style={{ color: '#00695c' }}>6Ô∏è‚É£ Destructuring in Function Parameters</h3>
      <pre><code>{`function greet({ name }) {
  console.log("Hello", name);
}

const user = { name: "Ram", age: 30 };
greet(user); // Hello Ram`}</code></pre>
      <p>üëâ Function ‡∞≤‡±ã‡∞®‡±á destructuring ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>

      <h3 style={{ color: '#00695c' }}>7Ô∏è‚É£ Destructuring in React Props</h3>
      <pre><code>{`// Traditional way
function User(props) {
  return <h3>{props.name}</h3>;
}

// Destructuring way
function User({ name }) {
  return <h3>{name}</h3>;
}`}</code></pre>
      <p>üëâ React ‡∞≤‡±ã frequently props destructuring ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç readability ‡∞ï‡±ã‡∞∏‡∞Ç.</p>

      <h3 style={{ color: '#00695c' }}>8Ô∏è‚É£ Default Values in Destructuring</h3>
      <pre><code>{`const { name = "Guest", age = 18 } = {};
console.log(name); // "Guest"`}</code></pre>

      <h3 style={{ color: '#00695c' }}>9Ô∏è‚É£ Use in Loops</h3>
      <pre><code>{`const users = [
  { name: "A", age: 22 },
  { name: "B", age: 28 }
];

users.forEach(({ name }) => {
  console.log(name);
});`}</code></pre>

      <h3 style={{ color: '#00695c' }}>üîö Summary:</h3>
      <ul>
        <li>Destructuring readability & code clarity ‡∞™‡±Ü‡∞Ç‡∞ö‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø</li>
        <li>React ‡∞≤‡±ã props, useState returns, loops ‡∞≤‡±ã extensively ‡∞µ‡∞æ‡∞°‡∞§‡∞æ‡∞Ç</li>
        <li>Array & Object structure ‡∞Æ‡±Ä‡∞¶ ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞™‡∞°‡∞ø correct destructuring ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø</li>
        <li>Nested objects ‡∞≤‡±ã error avoid ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø careful ‡∞ó‡∞æ destructure ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø</li>
      </ul>

      <>
      <div style={{ padding: '20px', background: '#f9f9f9', borderRadius: '10px', fontFamily: 'sans-serif' }}>
      <h2 style={{ color: '#4A90E2' }}>üìò React Hook Form ‚Äì Object Destructuring & JSX Spread</h2>

      <h3>‚úÖ 1. What is Object Destructuring?</h3>
      <p>
        Object destructuring is used to extract values from an object and assign them to variables.
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
        {`const person = { name: "Prasad", age: 26 };
const { name, age } = person;`}
      </pre>

      <h3>‚úÖ 2. Destructuring in JSX Props</h3>
      <p>
        Instead of accessing props like <code>props.name</code>, you can destructure them directly:
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
        {`const Welcome = ({ name }) => {
  return <h1>Hello, {name}</h1>;
};`}
      </pre>

      <h3>‚úÖ 3. Spread Syntax in JSX</h3>
      <p>
        You can use the spread operator <code>{`{...}`}</code> to inject all props from an object:
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
        {`const inputProps = {
  name: "firstName",
  onChange: () => {},
  onBlur: () => {},
  ref: someRef
};

<input {...inputProps} />`}
      </pre>

      <h3>‚úÖ 4. React Hook Form Example</h3>
      <p>
        In React Hook Form, <code>register()</code> returns an object. When you spread that into your input:
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
        {`<input {...register("firstName", { required: true })} />`}
      </pre>
      <p>
        It is same as manually writing:
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
        {`<input
  name="firstName"
  onChange={...}
  onBlur={...}
  ref={...}
/>`}
      </pre>

      <h3>üí° Summary </h3>
      <ul>
        <li><strong>register()</strong> method object return ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø</li>
        <li><strong>{`<input {...object} />`}</strong> ‡∞Ö‡∞®‡±á‡∞¶‡∞ø object ‡∞≤‡±ã‡∞®‡∞ø properties ‡∞Ö‡∞®‡±ç‡∞®‡∞ø‡∞ü‡∞ø‡∞®‡∞ø JSX ‡∞≤‡±ã spread ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø</li>
        <li>‡∞à ‡∞µ‡∞ø‡∞ß‡∞Ç‡∞ó‡∞æ React Hook Form field full integration ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø</li>
      </ul>
    </div>


    <div style={{ padding: '20px', background: '#fdfdfd', borderRadius: '10px', fontFamily: 'sans-serif' }}>
      <h2 style={{ color: '#4A90E2' }}>üìò React Hook Form ‚Äì Full Explanation</h2>

      <h3>‚úÖ 1. What is Object Destructuring?</h3>
      <p>
        Object destructuring allows you to pull multiple properties from an object easily:
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
{`const person = { name: "Prasad", age: 26 };
const { name, age } = person;`}
      </pre>

      <h3>‚úÖ 2. Destructuring in JSX Props</h3>
      <p>
        Instead of using <code>props.name</code>, you can directly destructure in function parameters:
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
{`const Welcome = ({ name }) => {
  return <h1>Hello, {name}</h1>;
};`}
      </pre>

      <h3>‚úÖ 3. Spread Syntax in JSX</h3>
      <p>
        Spread operator <code>{`{...}`}</code> is used to apply all properties of an object to an element.
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
{`const inputProps = {
  name: "firstName",
  onChange: () => {},
  onBlur: () => {},
  ref: someRef
};

<input {...inputProps} />`}
      </pre>

      <h3>‚úÖ 4. React Hook Form ‚Äì Key Example</h3>
      <p>
        <strong>useForm()</strong> returns several useful methods like <code>register</code>, <code>handleSubmit</code>, <code>watch</code>, and <code>formState.errors</code>
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
{`const {
  register,       // üëâ input fields ‡∞®‡∞ø React Hook Form ‡∞ï‡∞ø connect ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç
  handleSubmit,   // üëâ form submit handle ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø
  watch,          // üëâ field values live ‡∞ó‡∞æ ‡∞ö‡±Ç‡∞°‡∞ü‡∞æ‡∞®‡∞ø‡∞ï‡∞ø
  formState: { errors }  // üëâ form ‡∞≤‡±ã errors handle ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø
} = useForm();`}
      </pre>

      <h3>‚úÖ 5. Spread with register() ‚Üí Input Integration</h3>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
{`<input {...register("firstName", { required: true })} />`}
      </pre>
      <p>This is equal to writing manually:</p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
{`<input
  name="firstName"
  onChange={...}
  onBlur={...}
  ref={...}
/>`}
      </pre>

      <h3>‚úÖ 6. Special Case: Only Getting `register` from useForm()</h3>
      <p>
        If you're only using <code>register</code> method from <code>useForm</code>, you can destructure like this:
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
{`const { register } = useForm();`}
      </pre>
      <p>
        Or even like this:
      </p>
      <pre style={{ background: '#eee', padding: '10px', borderRadius: '5px' }}>
{`const register = useForm().register;`}
      </pre>

      <h3>üß†  Summary:</h3>
      <ul>
        <li><strong>useForm()</strong> ‡∞Ö‡∞®‡±á hook ‡∞®‡∞ø form logic ‡∞ï‡±ã‡∞∏‡∞Ç use ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç</li>
        <li><strong>register()</strong> ‚Üí input ‡∞®‡∞ø React Hook Form ‡∞ï‡∞ø connect ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø</li>
        <li><strong>...spread</strong> ‚Üí input ‡∞Æ‡±Ä‡∞¶ object ‡∞≤‡±ã‡∞®‡∞ø properties ‡∞®‡∞ø apply ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø</li>
        <li><strong>const  register </strong> ‚Üí useForm return object ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞ï‡±ä‡∞®‡±ç‡∞®‡∞ø ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞°‡∞Ç</li>
      </ul>
    </div>
      
      </>
    </div>
  );
};

export default DestructuringGuide;

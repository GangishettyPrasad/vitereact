import React from 'react';

const AsyncAwaitGuide = () => {
  return (
    <div style={{ padding: '2rem', fontFamily: 'Segoe UI', backgroundColor: '#f4f6f7' }}>
      <h2 style={{ color: '#2980b9' }}>üîÑ Async / Await ‚Äì JavaScript & React (Telugu JSX Guide)</h2>

      <h3 style={{ color: '#1abc9c' }}>üëâ Async / Await ‡∞Ö‡∞Ç‡∞ü‡±á ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?</h3>
      <p>
        JavaScript ‡∞≤‡±ã asynchronous code ‡∞®‡∞ø synchronous ‡∞≤‡∞æ handle ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡±á <b>async/await</b> ‡∞µ‡∞æ‡∞°‡∞§‡∞æ‡∞Ç.
        ‡∞á‡∞¶‡∞ø <code>.then()</code> ‡∞ï‡∞Ç‡∞ü‡±á readable & cleaner syntax ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
      </p>

      <h3 style={{ color: '#9b59b6' }}>üìå Basic Syntax:</h3>
      <pre style={{ backgroundColor: '#fceade', padding: '1rem' }}>
        <code>{`
async function fetchData() {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  console.log(data);
}
        `}</code>
      </pre>

      <h3 style={{ color: '#d35400' }}>‚úÖ Real-Time Example:</h3>
      <p>‡∞í‡∞ï API ‡∞®‡±Å‡∞Ç‡∞ö‡∞ø users list ‡∞§‡±Ä‡∞∏‡∞ø console ‡∞≤‡±ã print ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç:</p>
      <pre style={{ backgroundColor: '#f9ebea', padding: '1rem' }}>
        <code>{`
async function getUsers() {
  try {
    const res = await fetch('https://jsonplaceholder.typicode.com/users');
    const users = await res.json();
    console.log(users);
  } catch (error) {
    console.error('Error fetching users:', error);
  }
}
        `}</code>
      </pre>

      <h3 style={{ color: '#2471a3' }}>‚öõÔ∏è React Example:</h3>
      <p>Component load ‡∞Ö‡∞Ø‡±ç‡∞Ø‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å data fetch ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø:</p>
      <pre style={{ backgroundColor: '#e8f8f5', padding: '1rem' }}>
        <code>{`
import { useEffect, useState } from 'react';

const Users = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      const res = await fetch('https://jsonplaceholder.typicode.com/users');
      const data = await res.json();
      setUsers(data);
    };

    fetchUsers();
  }, []);

  return (
    <ul>
      {users.map(user => <li key={user.id}>{user.name}</li>)}
    </ul>
  );
};
        `}</code>
      </pre>

      <h3 style={{ color: '#c0392b' }}>‚ö†Ô∏è Common Mistakes:</h3>
      <ul>
        <li><b>await</b> must be used only inside <code>async</code> functions.</li>
        <li>Always use <code>try/catch</code> for error handling.</li>
        <li>Don‚Äôt forget <code>[]</code> in <code>useEffect</code> dependency array!</li>
      </ul>

      <h3 style={{ color: '#7d3c98' }}>üìñ Summary (Telugu Recap):</h3>
      <ul>
        <li><b>async/await</b> ‡∞µ‡∞≤‡±ç‡∞≤ code readable & manageable ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</li>
        <li>React ‡∞≤‡±ã mostly <code>useEffect</code>, <code>onClick</code>, <code>form submit</code> ‡∞≤‡±ã ‡∞µ‡∞æ‡∞°‡∞§‡∞æ‡∞Ç.</li>
        <li>Promises ‡∞®‡±Å synchronous structure ‡∞≤‡±ã handle ‡∞ö‡±á‡∞Ø‡±ä‡∞ö‡±ç‡∞ö‡±Å.</li>
      </ul>

      <p style={{ marginTop: '2rem', color: '#2980b9', fontWeight: 'bold' }}>
        ‚úÖ ‡∞®‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞∏‡±ç‡∞ü‡±Ü‡∞™‡±ç: Want to continue with <b>Promise chaining + Error handling?</b><br />
        Or move into üîÅ <b>Custom Promises + Advanced Async Patterns?</b>
      </p>
    </div>
  );
};

export default AsyncAwaitGuide;

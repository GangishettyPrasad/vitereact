import React, { useState, useEffect } from 'react';

const AsynchronousMethods = () => {
  const [timeoutMessage, setTimeoutMessage] = useState('Waiting for timeout...');
  const [intervalCount, setIntervalCount] = useState(0);
  const [promiseMessage, setPromiseMessage] = useState('Waiting for promise...');
  const [asyncAwaitMessage, setAsyncAwaitMessage] = useState('Waiting for async/await...');

  useEffect(() => {
    // 1. setTimeout Example
    const timeout = setTimeout(() => {
      setTimeoutMessage('‚úÖ setTimeout Worked after 3 seconds!');
    }, 3000);

    // 2. setInterval Example
    const interval = setInterval(() => {
      setIntervalCount(prev => prev + 1);
    }, 1000); // Every 1 second

    // 3. Promise Example
    const myPromise = new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('‚úÖ Promise Resolved after 2 seconds!');
      }, 2000);
    });

    myPromise.then((res) => {
      setPromiseMessage(res);
    });

    // 4. async/await Example
    async function fetchData() {
      const data = await new Promise((resolve) => {
        setTimeout(() => {
          resolve('‚úÖ Async/Await Worked after 2.5 seconds!');
        }, 2500);
      });
      setAsyncAwaitMessage(data);
    }
    fetchData();

    // Cleanup (Best Practice)
    return () => {
      clearTimeout(timeout);
      clearInterval(interval);
    };
  }, []);

  return (
    <div>
      <h1>üïë Asynchronous Methods in JavaScript (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã)</h1>

      {/* 1. setTimeout */}
      <section>
        <h2>1. setTimeout()</h2>
        <p><strong>‡∞á‡∞¶‡∞ø ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø:</strong> ‡∞í‡∞ï function ‡∞®‡∞ø ‡∞ï‡±ä‡∞®‡±ç‡∞®‡∞ø milliseconds ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞í‡∞ï‡±ç‡∞ï‡∞∏‡∞æ‡∞∞‡∞ø‡∞ó‡∞æ execture ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.</p>
        <p><strong>‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç:</strong> Delay ‡∞ö‡±á‡∞∏‡∞ø‡∞® Actions, Notifications ‡∞ö‡±Ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø.</p>
        <p><strong>‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç:</strong> API response ‡∞§‡∞∞‡±Å‡∞µ‡∞æ‡∞§ ‡∞è‡∞¶‡±à‡∞®‡∞æ UI ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞æ‡∞≤‡∞ø ‡∞Ö‡∞Ç‡∞ü‡±á.</p>
        <p><strong>Example:</strong></p>
        <p>{timeoutMessage}</p>
      </section>

      {/* 2. setInterval */}
      <section>
        <h2>2. setInterval()</h2>
        <p><strong>‡∞á‡∞¶‡∞ø ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø:</strong> ‡∞í‡∞ï function ‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞ï‡±ä‡∞®‡±ç‡∞®‡∞ø milliseconds ‡∞ï‡∞ø ‡∞∏‡∞æ‡∞∞‡∞ø ‡∞∏‡∞æ‡∞∞‡∞ø execute ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç.</p>
        <p><strong>‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç:</strong> Timers, Live Clocks, Continuous updates ‡∞ï‡±ã‡∞∏‡∞Ç.</p>
        <p><strong>‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç:</strong> ‡∞™‡±ç‡∞∞‡∞§‡∞ø 1 sec ‡∞ï‡∞ø data fetch ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø, timer update ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø ‡∞Ö‡∞Ç‡∞ü‡±á.</p>
        <p><strong>Example:</strong></p>
        <p>Interval Count: {intervalCount}</p>
      </section>

      {/* 3. Promise */}
      <section>
        <h2>3. Promise</h2>
        <p><strong>‡∞á‡∞¶‡∞ø ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø:</strong> JavaScript ‡∞≤‡±ã Future ‡∞≤‡±ã ‡∞è‡∞¶‡±ã ‡∞í‡∞ï async operation ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞®‡∞ø ‡∞π‡∞æ‡∞Æ‡±Ä ‡∞á‡∞ö‡±ç‡∞ö‡±á ‡∞í‡∞ï Object.</p>
        <p><strong>‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç:</strong> Async operations (‡∞≤‡∞æ‡∞Ç‡∞ü‡∞ø‡∞¶‡∞ø API Calls) ‡∞®‡∞ø Handle ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø.</p>
        <p><strong>‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç:</strong> Data ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞æ ‡∞≤‡±á‡∞¶‡∞æ ‡∞µ‡∞ö‡±ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø ‡∞§‡±Ä‡∞∞‡∞æ ‡∞§‡±Ü‡∞≤‡∞ø‡∞Ø‡∞ú‡±á‡∞Ø‡∞æ‡∞≤‡∞ø ‡∞Ö‡∞Ç‡∞ü‡±á.</p>
        <p><strong>Example:</strong></p>
        <p>{promiseMessage}</p>
      </section>

      {/* 4. async/await */}
      <section>
        <h2>4. async/await</h2>
        <p><strong>‡∞á‡∞¶‡∞ø ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø:</strong> Promises ‡∞®‡∞ø Easy ‡∞ó‡∞æ ‡∞ö‡∞¶‡∞ø‡∞µ‡±á‡∞≤‡∞æ, ‡∞∏‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±ç syntax ‡∞§‡±ã Handle ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç.</p>
        <p><strong>‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç:</strong> Clean ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å Error-free asynchronous code ‡∞∞‡∞æ‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø.</p>
        <p><strong>‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç:</strong> Data fetching, API calls, Long-running operations ‡∞≤‡±ã.</p>
        <p><strong>Example:</strong></p>
        <p>{asyncAwaitMessage}</p>
      </section>

    </div>
  );
};

export default AsynchronousMethods;

import React from 'react';

const RoleBasedRoutingGuide = () => {
  return (
    <div style={{ padding: '2rem', fontFamily: 'Segoe UI, sans-serif', lineHeight: '1.8', background: '#fffefc' }}>
      <h2 style={{ color: '#4a148c' }}>üîê Role-Based Authentication & Routing ‚Äì JSX + </h2>

      <h3 style={{ color: '#00695c' }}>üìÑ 1. Login.jsx ‡∞≤‡±ã ‡∞è‡∞Æ‡∞ø ‡∞ú‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø?</h3>
      <ul>
        <li><strong>useState</strong> ‡∞§‡±ã form data (email/password) capture ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.</li>
        <li><strong>Fixed credentials</strong> ‡∞§‡±ã compare ‡∞ö‡±á‡∞∏‡∞ø login success ‡∞Ö‡∞Ø‡∞ø‡∞§‡±á <strong>localStorage ‡∞≤‡±ã role ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å isLoggedIn</strong> values save ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.</li>
        <li><strong>navigate('/dashboard')</strong> ‡∞§‡±ã protected route ‡∞ï‡∞ø ‡∞™‡∞Ç‡∞™‡±Å‡∞§‡∞æ‡∞Ç.</li>
        <li>Example:
          <pre style={{ background: '#f3e5f5', padding: '10px' }}>
{`if (email === 'admin@site.com') {
  localStorage.setItem('role', 'admin');
  localStorage.setItem('isLoggedIn', 'true');
  navigate('/dashboard');
}`}          </pre>
        </li>
      </ul>

      <h3 style={{ color: '#00695c' }}>üõ°Ô∏è 2. ProtectedRoute.jsx ‡∞≤‡±ã ‡∞è‡∞Æ‡∞ø ‡∞ú‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø?</h3>
      <ul>
        <li><strong>localStorage</strong> ‡∞®‡±Å‡∞Ç‡∞°‡∞ø user login ‡∞Ö‡∞Ø‡±ç‡∞Ø‡∞æ‡∞°‡∞æ ‡∞≤‡±á‡∞¶‡∞æ ‡∞Ö‡∞®‡∞ø check ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</li>
        <li>Login ‡∞Ö‡∞Ø‡∞ø‡∞§‡±á <code>{`children`}</code> render ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞§‡±á <code>&lt;Navigate to="/" /&gt;</code> ‡∞§‡±ã login page ‡∞ï‡∞ø ‡∞™‡∞Ç‡∞™‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</li>
        <li>Example:
          <pre style={{ background: '#e3f2fd', padding: '10px' }}>
{`const isLoggedIn = localStorage.getItem('isLoggedIn');
return isLoggedIn ? children : <Navigate to="/" />;`}          </pre>
        </li>
      </ul>

      <h3 style={{ color: '#00695c' }}>üìÇ 3. App.js ‡∞≤‡±ã ‡∞è‡∞Æ‡∞ø ‡∞ú‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø?</h3>
      <ul>
        <li>‡∞Ö‡∞®‡±ç‡∞®‡∞ø routes define ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç: public (login), protected (dashboard + nested routes)</li>
        <li><strong>ProtectedRoute</strong> wrapper ‡∞§‡±ã secure ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç.</li>
        <li><strong>Role-based</strong> pages like only admin/user access configuration ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.</li>
        <li>Example:
          <pre style={{ background: '#fce4ec', padding: '10px' }}>
{`<Route path="/dashboard" element={<ProtectedRoute><Layout /></ProtectedRoute>}>
  <Route path="css" element={<ProtectedRoute allowedRoles={["admin"]}>...</ProtectedRoute>} />
</Route>`}          </pre>
        </li>
      </ul>

      <h3 style={{ color: '#00695c' }}>‚öôÔ∏è 4. DynamicRoute.jsx (role based access)</h3>
      <ul>
        <li>‡∞à file ‡∞≤‡±ã <strong>allowedRoles prop</strong> pass ‡∞ö‡±á‡∞∏‡∞ø, localStorage ‡∞®‡±Å‡∞Ç‡∞°‡∞ø role check ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.</li>
        <li>User ‡∞ï‡∞ø access ‡∞â‡∞Ç‡∞ü‡±á <code>{`children`}</code> render ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç, ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞§‡±á <strong>/unauthorized</strong> page ‡∞ï‡∞ø ‡∞™‡∞Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.</li>
        <li>Example:
          <pre style={{ background: '#fff3e0', padding: '10px' }}>
{`const userRole = localStorage.getItem('role');
if (allowedRoles.includes(userRole)) {
  return children;
} else {
  return <Navigate to="/unauthorized" />;
}`}          </pre>
        </li>
      </ul>

      <h3 style={{ color: '#4e342e' }}>üí° Real-Time Strategy (Simple vs Complex)</h3>
      <p>
        ‚úÖ <strong>Simple Project:</strong> 1 user/admin ‚Äì Login, save role, protect route with just isLoggedIn check.<br/>
        ‚úÖ <strong>Large Project (100+ routes):</strong>
        Use centralized <strong>AuthContext</strong> or config-based dynamic routing structure.
      </p>

      <h3 style={{ color: '#1a237e' }}>üéØ Summary (Easy Reference)</h3>
      <ol>
        <li><strong>Login.jsx</strong>: Role + Login logic (store in localStorage)</li>
        <li><strong>ProtectedRoute.jsx</strong>: Login check</li>
        <li><strong>DynamicRoute.jsx</strong>: Role check (admin/user)</li>
        <li><strong>App.js</strong>: Routes definition + wrapper usage</li>
      </ol>
    </div>
  );
};

export default RoleBasedRoutingGuide;

import React from 'react';

const EventsGuide = () => {
  return (
    <div style={{ padding: '2rem', fontFamily: 'Segoe UI, sans-serif', lineHeight: '1.8', background: '#f9f9f9' }}>
      <h2 style={{ color: '#005aa7' }}>üéØ Events in JavaScript & React ‚Äì Real-Time Guide with </h2>

      <p>Events ‡∞Ö‡∞®‡±á‡∞µ‡∞ø user interactions (click, input, keypress, mouseover, etc) handle ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å. React ‡∞≤‡±ã state updates, validations, API calls & UI interactivity ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞µ‡±Ä‡∞ü‡∞ø importance ‡∞ö‡∞æ‡∞≤‡∞æ ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ!</p>

      <h3 style={{ color: '#0d7c8c' }}>1Ô∏è‚É£ JavaScript Click Event</h3>
      <pre>
        <code>{`<button onclick="alert('Clicked!')">Click Me</button>`}</code>
      </pre>
      <p><strong>Explanation:</strong> HTML + JavaScript ‡∞≤‡±ã inline event use ‡∞ö‡±á‡∞∏‡∞æ‡∞Ç. Click ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±á alert ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</p>

      <h3 style={{ color: '#0d7c8c' }}>2Ô∏è‚É£ JavaScript addEventListener</h3>
      <pre>
        <code>{`document.getElementById("btn").addEventListener("click", () => {
  console.log("Button clicked");
});`}</code>
      </pre>
      <p><strong>Explanation:</strong> Button click ‡∞Ö‡∞Ø‡±ç‡∞Ø‡±á event handle ‡∞ö‡±á‡∞∏‡∞æ‡∞Ç using JS.</p>

      <h3 style={{ color: '#0d7c8c' }}>3Ô∏è‚É£ React Click Event</h3>
      <pre>
        <code>{`<button onClick={() => alert('React Button Clicked!')}>Click</button>`}</code>
      </pre>
      <p><strong>React ‡∞≤‡±ã:</strong> <code>onClick</code> camelCase ‡∞≤‡±ã use ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç, inline function works perfectly.</p>

      <h3 style={{ color: '#0d7c8c' }}>4Ô∏è‚É£ React Input Change Event</h3>
      <pre>
        <code>{`<input type="text" onChange={(e) => setText(e.target.value)} />`}</code>
      </pre>
      <p><strong>Explanation:</strong> Input ‡∞≤‡±ã type ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞™‡±ç‡∞∞‡∞§‡∞ø change ‡∞®‡∞ø track ‡∞ö‡±á‡∞∏‡∞æ‡∞Ç using <code>onChange</code>.</p>

      <h3 style={{ color: '#0d7c8c' }}>5Ô∏è‚É£ Keyboard Event in React</h3>
      <pre>
        <code>{`<input type="text" onKeyDown={(e) => console.log(e.key)} />`}</code>
      </pre>
      <p><strong>Explanation:</strong> ‡∞è key press ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡±ã <code>console.log</code> ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.</p>

      <h3 style={{ color: '#0d7c8c' }}>6Ô∏è‚É£ Form Submit Event</h3>
      <pre>
        <code>{`<form onSubmit={(e) => { e.preventDefault(); console.log("Submitted!"); }}>
  <input type="text" />
  <button type="submit">Submit</button>
</form>`}</code>
      </pre>
      <p><strong>Explanation:</strong> React ‡∞≤‡±ã <code>onSubmit</code> ‡∞§‡±ã form submit handle ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç, default refresh ‡∞®‡∞ø prevent ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.</p>

      <h3 style={{ color: '#0d7c8c' }}>7Ô∏è‚É£ Mouse Over & Mouse Out</h3>
      <pre>
        <code>{`<div onMouseOver={() => console.log("Hovered")} onMouseOut={() => console.log("Mouse Left")}>
  Hover Here
</div>`}</code>
      </pre>
      <p><strong>Explanation:</strong> UI interactions ‡∞ï‡±ã‡∞∏‡∞Ç excellent!</p>

      <h3 style={{ color: '#0d7c8c' }}>8Ô∏è‚É£ Button Double Click</h3>
      <pre>
        <code>{`<button onDoubleClick={() => alert("Double Clicked")}>Double Click</button>`}</code>
      </pre>
      <p><strong>Explanation:</strong> React ‡∞≤‡±ã double click events ‡∞ï‡±Ç‡∞°‡∞æ handle ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>

      <h3 style={{ color: '#0d7c8c' }}>9Ô∏è‚É£ Event Delegation in JavaScript</h3>
      <pre>
        <code>{`document.getElementById("parent").addEventListener("click", (e) => {
  if(e.target.tagName === "BUTTON") console.log("Button clicked:", e.target);
});`}</code>
      </pre>
      <p><strong>Explanation:</strong> Parent level ‡∞®‡±Å‡∞Ç‡∞°‡∞ø child clicks handle ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç delegation ‡∞Ö‡∞Ç‡∞ü‡∞æ‡∞∞‡±Å. Performance friendly!</p>

      <h3 style={{ color: '#0d7c8c' }}>üîü Real-Time Use: Dynamic Button Click</h3>
      <pre>
        <code>{`{items.map((item, index) => (
  <button key={index} onClick={() => handleClick(item.id)}>
    {item.name}
  </button>
))}`}</code>
      </pre>
      <p><strong>Explanation:</strong> Lists ‡∞≤‡±ã‡∞®‡∞ø dynamic data ‡∞ï‡±ã‡∞∏‡∞Ç <code>onClick</code> ‡∞≤‡±ã function bind ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç ‡∞ö‡∞æ‡∞≤‡∞æ common.</p>

      <h3 style={{ color: '#0d7c8c' }}>‚úÖ Best Practices</h3>
      <ul>
        <li>Always use <code>e.preventDefault()</code> for form submissions</li>
        <li>Prefer named functions for performance (instead of inline in big lists)</li>
        <li>Use event delegation for large dynamic lists (in JS)</li>
        <li>Use memoization (like useCallback) to prevent re-renders in React</li>
      </ul>
    </div>
  );
};

export default EventsGuide;

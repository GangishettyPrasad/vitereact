import React from 'react';

const FilterGuide = () => {
  return (
    <div style={{ padding: '2rem', fontFamily: 'Segoe UI, sans-serif', lineHeight: '1.8', background: '#f9f9f9' }}>
      <h2 style={{ color: '#0a5c91' }}>üîç JavaScript & React ‚Äì <code>filter()</code> Method Full Guide in Telugu</h2>

      <p>
        <strong><code>filter()</code></strong> method ‡∞Ö‡∞®‡±á‡∞¶‡∞ø JavaScript ‡∞≤‡±ã array ‡∞≤‡±ã‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞§‡∞ø element ‡∞®‡±Å check ‡∞ö‡±á‡∞∏‡∞ø, condition satisfy ‡∞Ö‡∞Ø‡∞ø‡∞® elements ‡∞§‡±ã ‡∞ï‡±ä‡∞§‡±ç‡∞§ array ‡∞§‡∞Ø‡∞æ‡∞∞‡±Å ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å.
      </p>
      <p>üëâ ‡∞á‡∞¶‡∞ø original array ‡∞®‡∞ø modify ‡∞ö‡±á‡∞Ø‡∞¶‡±Å (immutability).</p>

      <h3 style={{ color: '#00796b' }}>‚úÖ Basic Syntax:</h3>
      <pre><code>{`const newArray = array.filter((element, index, array) => condition);`}</code></pre>

      <h3 style={{ color: '#00796b' }}>1Ô∏è‚É£ Example ‚Äì Even Numbers Only</h3>
      <pre><code>{`const numbers = [1, 2, 3, 4, 5];
const even = numbers.filter(num => num % 2 === 0); 
console.log(even); // [2, 4]`}</code></pre>
      <p><strong>Telugu Explanation:</strong> <code>% 2 === 0</code> ‡∞Ö‡∞®‡∞ø check ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞§‡±ã, even numbers ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á retain ‡∞Ö‡∞µ‡±Å‡∞§‡∞æ‡∞Ø‡∞ø.</p>

      <h3 style={{ color: '#00796b' }}>2Ô∏è‚É£ Example ‚Äì Remove Falsy Values</h3>
      <pre><code>{`const mixed = [0, "Hello", false, null, 42, undefined, "React"];
const truthy = mixed.filter(Boolean);
console.log(truthy); // ["Hello", 42, "React"]`}</code></pre>
      <p><strong>Explanation:</strong> <code>Boolean</code> constructor ‡∞®‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞ø, truthy values ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞µ‡∞∏‡±ç‡∞§‡∞æ‡∞Ø‡∞ø.</p>

      <h3 style={{ color: '#00796b' }}>3Ô∏è‚É£ Example ‚Äì Filter Users Based on Age</h3>
      <pre><code>{`const users = [
  { name: "Ravi", age: 20 },
  { name: "Kiran", age: 30 },
  { name: "Raju", age: 17 }
];

const adults = users.filter(user => user.age >= 18);
console.log(adults);`}</code></pre>
      <p>üëâ 18 years ‡∞ï‡∞ø ‡∞™‡±à‡∞ó‡∞æ ‡∞â‡∞®‡±ç‡∞® users ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞µ‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å.</p>

      <h3 style={{ color: '#00796b' }}>4Ô∏è‚É£ Example ‚Äì Filter by String Includes</h3>
      <pre><code>{`const fruits = ["apple", "banana", "grape", "mango"];
const filtered = fruits.filter(fruit => fruit.includes("a"));
console.log(filtered); // ["apple", "banana", "grape", "mango"]`}</code></pre>

      <h3 style={{ color: '#00796b' }}>5Ô∏è‚É£ React Example ‚Äì Filter Displayed List</h3>
      <pre><code>{`const names = ["Prasad", "mounika", "Ram", "Seetha"];
const filteredNames = names.filter(name => name.startsWith("S"));`}</code></pre>
      <p>üëâ React component ‡∞≤‡±ã ‡∞á‡∞¶‡∞ø list rendering ‡∞ï‡±ã‡∞∏‡∞Ç use ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Ç: <code>{`{filteredNames.map(name => <li>{name}</li>)}`}</code></p>

      <h3 style={{ color: '#00796b' }}>6Ô∏è‚É£ Example ‚Äì Search Filter in Real-time</h3>
      <pre><code>{`const handleSearch = (e) => {
  const value = e.target.value.toLowerCase();
  const result = users.filter(user => user.name.toLowerCase().includes(value));
};`}</code></pre>
      <p><strong>React ‡∞≤‡±ã Use Case:</strong> Search box ‡∞§‡±ã users ‡∞®‡∞ø filter ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞á‡∞¶‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞™‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</p>

      <h3 style={{ color: '#00796b' }}>7Ô∏è‚É£ Example ‚Äì Nested Object Filtering</h3>
      <pre><code>{`const companies = [
  { name: "TCS", location: { city: "Hyderabad" } },
  { name: "Infosys", location: { city: "Bangalore" } }
];

const hydCompanies = companies.filter(company => company.location.city === "Hyderabad");`}</code></pre>
      <p>üëâ Nested property ‡∞≤‡±ã ‡∞ï‡±Ç‡∞°‡∞æ filter ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å!</p>

      <h3 style={{ color: '#00796b' }}>üîö Summary:</h3>
      <ul>
        <li><strong>filter()</strong> returns a new array</li>
        <li>Immutability maintain ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø</li>
        <li>Condition satisfy ‡∞Ö‡∞Ø‡∞ø‡∞® values retain ‡∞Ö‡∞µ‡±Å‡∞§‡∞æ‡∞Ø‡∞ø</li>
        <li>React ‡∞≤‡±ã rendering, search, permissions, status filtering ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞¨‡∞æ‡∞ó‡∞æ ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞™‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø</li>
      </ul>
    </div>
  );
};

export default FilterGuide;

import React from 'react';

const JSXConditionalRenderingGuide = () => {
  const isLoggedIn = true;
  const user = { name: 'Mounika', city: 'Hyderabad' };
  const messages = ['Hi', 'Welcome back!'];
  const todos = [];

  const getGreeting = (userName) => {
    if (userName) {
      return `Hi, ${userName}!`;
    }
    return 'Hi, Guest!';
  };

  return (
    <div style={{ padding: '2rem', background: '#fef9e7', fontFamily: 'Segoe UI' }}>
      <h2 style={{ color: '#af601a' }}>‚öõÔ∏è JSX Conditional Rendering Guide </h2>

      <h3 style={{ color: '#884ea0' }}>1Ô∏è‚É£ if-else Statement</h3>
      <p>JSX ‡∞≤‡±ã outside condition check ‡∞ö‡±á‡∞∏‡∞ø content return ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>
      <pre style={{ background: '#f5eef8', padding: '1rem' }}>
        <code>
{`function getGreeting(userName) {
  if (userName) return \`Hi, \${userName}!\`;
  return 'Hi, Guest!';
}`}
        </code>
      </pre>
      <p><strong>Output:</strong> {getGreeting(user.name)}</p>

      <h3 style={{ color: '#2471a3' }}>2Ô∏è‚É£ Ternary Operator</h3>
      <p>One-line condition check & return.</p>
      <pre style={{ background: '#d6eaf8', padding: '1rem' }}>
        <code>{`{isLoggedIn ? "Welcome, Mounika!" : "Please log in."}`}</code>
      </pre>
      <p><strong>Output:</strong> {isLoggedIn ? "Welcome, Mounika!" : "Please log in."}</p>

      <h3 style={{ color: '#239b56' }}>3Ô∏è‚É£ Logical AND (&&)</h3>
      <p>Condition true ‡∞Ö‡∞Ø‡∞ø‡∞§‡±á ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á show ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</p>
      <pre style={{ background: '#d5f5e3', padding: '1rem' }}>
        <code>{`{messages.length > 0 && <p>You have {messages.length} messages</p>}`}</code>
      </pre>
      {messages.length > 0 && <p>You have {messages.length} messages</p>}

      <h3 style={{ color: '#ca6f1e' }}>4Ô∏è‚É£ Conditional Arrays Render</h3>
      <p>Array empty ‡∞Ö‡∞Ø‡∞ø‡∞§‡±á fallback message ‡∞á‡∞µ‡±ç‡∞µ‡±ä‡∞ö‡±ç‡∞ö‡±Å.</p>
      <pre style={{ background: '#fdebd0', padding: '1rem' }}>
        <code>{`{todos.length === 0 ? <p>No tasks</p> : todos.map(...)}`}</code>
      </pre>
      {todos.length === 0 ? <p>No tasks</p> : todos.map((todo, i) => <li key={i}>{todo}</li>)}

      <h3 style={{ color: '#6c3483' }}>5Ô∏è‚É£ Optional Chaining + Fallback</h3>
      <p>object data ‡∞â‡∞Ç‡∞°‡∞ï‡∞™‡±ã‡∞Ø‡∞ø‡∞®‡∞æ fallback value ‡∞á‡∞µ‡±ç‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>
      <pre style={{ background: '#e8daef', padding: '1rem' }}>
        <code>{`<p>{user?.name || "Guest User"}</p>`}</code>
      </pre>
      <p>{user?.name || "Guest User"}</p>

      <h3 style={{ color: '#1a5276' }}>6Ô∏è‚É£ Real-Time Example with JSX & Array</h3>
      <p>Users Array ‡∞â‡∞Ç‡∞ü‡±á list ‡∞ö‡±Ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞æ‡∞≤‡∞ø, ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞§‡±á message ‡∞á‡∞µ‡±ç‡∞µ‡∞æ‡∞≤‡∞ø.</p>
      <pre style={{ background: '#d4efdf', padding: '1rem' }}>
        <code>
{`const usersList = [
  { id: 1, name: 'Mounika' },
  { id: 2, name: 'Sagar' }
];

{usersList.length > 0 
  ? usersList.map(user => <p key={user.id}>{user.name}</p>)
  : <p>No users found</p>
}`}
        </code>
      </pre>

      <h4>Rendered Output:</h4>
      {[
        { id: 1, name: 'Mounika' },
        { id: 2, name: 'Sagar' }
      ].length > 0
        ? [
            { id: 1, name: 'Mounika' },
            { id: 2, name: 'Sagar' }
          ].map(user => <p key={user.id}>{user.name}</p>)
        : <p>No users found</p>}

      <h3 style={{ color: '#117864', marginTop: '2rem' }}>üìù Summary (Telugu Recap):</h3>
      <ul>
        <li><strong>if / if-else</strong> ‚Üí complex logic cases</li>
        <li><strong>ternary ( ? : )</strong> ‚Üí inline simple conditions</li>
        <li><strong>&& operator</strong> ‚Üí display only if true</li>
        <li><strong>optional chaining (?.)</strong> ‚Üí avoid errors from undefined</li>
        <li><strong>Array.map + fallback</strong> ‚Üí dynamic list rendering</li>
      </ul>

      <p style={{ marginTop: '2rem', fontWeight: 'bold', color: '#9c640c' }}>
        ‚úÖ ‡∞à concept React UI conditions build ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã core role play ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. <br />
        üëâ Shall we move on to the next topic: <strong>JSX Event Handling Deep Dive?</strong>
      </p>
    </div>
  );
};

export default JSXConditionalRenderingGuide;

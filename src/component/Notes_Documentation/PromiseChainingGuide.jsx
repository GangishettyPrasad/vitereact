import React from 'react';

const PromiseChainingGuide = () => {
  return (
    <div style={{ padding: '2rem', fontFamily: 'Segoe UI', backgroundColor: '#f9f9f9' }}>
      <h2 style={{ color: '#2e86de' }}>üîó JavaScript Promises ‚Äì Chaining & Error Handling (Telugu Guide)</h2>

      <h3 style={{ color: '#d35400' }}>üëâ Promise ‡∞Ö‡∞Ç‡∞ü‡±á ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?</h3>
      <p>
        Promise ‡∞Ö‡∞®‡±á‡∞¶‡∞ø asynchronous operation complete ‡∞Ö‡∞Ø‡±ç‡∞Ø‡±á ‡∞¶‡∞æ‡∞ï‡∞æ wait ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø JavaScript ‡∞≤‡±ã‡∞®‡∞ø special object.<br />
        ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞ï‡∞ø: API call, Timer, File read/write.
      </p>

      <h3 style={{ color: '#16a085' }}>üìå Basic Syntax:</h3>
      <pre style={{ background: '#ecf0f1', padding: '1rem' }}>
        <code>
          {`const promise = new Promise((resolve, reject) => {
  if (success) {
    resolve("Success!");
  } else {
    reject("Error occurred!");
  }
});`}
        </code>
      </pre>

      <h3 style={{ color: '#8e44ad' }}>üîÑ Chaining Promises:</h3>
      <pre style={{ background: '#f5eef8', padding: '1rem' }}>
        <code>
          {`fetchUser()
  .then(user => fetchPosts(user.id))
  .then(posts => displayPosts(posts))
  .catch(error => console.error("Error:", error))
  .finally(() => console.log("Done ‚úÖ"));`}
        </code>
      </pre>
      <p>
        ‡∞™‡±ç‡∞∞‡∞§‡∞ø `.then()` ‡∞Æ‡±Å‡∞Ç‡∞¶‡±Å result ‡∞®‡∞ø ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ä‡∞®‡∞ø next step ‡∞ï‡±Å ‡∞™‡∞Ç‡∞™‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.<br />
        `.catch()` ‚Üí Error handle ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. <br />
        `.finally()` ‚Üí Always execute ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, success/gailure ‡∞ï‡±Ä ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞Ç ‡∞≤‡±á‡∞ï‡±Å‡∞Ç‡∞°‡∞æ.
      </p>

      <h3 style={{ color: '#c0392b' }}>üî• Real-Time Example:</h3>
      <pre style={{ background: '#fdebd0', padding: '1rem' }}>
        <code>
          {`const login = (username, password) => {
  return new Promise((resolve, reject) => {
    if (username === 'admin') resolve("Login Success");
    else reject("Invalid User");
  });
};

login('admin', '1234')
  .then(res => console.log(res))
  .catch(err => console.log(err));`}
        </code>
      </pre>

      <h3 style={{ color: '#117864' }}>‚öõÔ∏è React ‡∞≤‡±ã Promise Chaining Example:</h3>
      <pre style={{ background: '#eafaf1', padding: '1rem' }}>
        <code>
          {`useEffect(() => {
  fetch('https://api.example.com/user')
    .then(res => res.json())
    .then(data => {
      console.log("User data:", data);
      return fetch(\`https://api.example.com/posts?user=\${data.id}\`);
    })
    .then(res => res.json())
    .then(posts => console.log("Posts:", posts))
    .catch(err => console.error("API Error", err));
}, []);`}
        </code>
      </pre>

      <h3 style={{ color: '#2c3e50' }}>‚úÖ Telugu Summary (Recap):</h3>
      <ul>
        <li><strong>Promises</strong> asynchronous operations handle ‡∞ö‡±á‡∞Ø‡∞ü‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞™‡∞°‡∞§‡∞æ‡∞Ø‡∞ø.</li>
        <li><strong>.then()</strong> ‚Üí Success case ‡∞≤‡±ã chaining ‡∞ï‡±ã‡∞∏‡∞Ç.</li>
        <li><strong>.catch()</strong> ‚Üí Errors handle ‡∞ö‡±á‡∞Ø‡∞ü‡∞æ‡∞®‡∞ø‡∞ï‡∞ø.</li>
        <li><strong>.finally()</strong> ‚Üí Last step, always run ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</li>
        <li><strong>React ‡∞≤‡±ã</strong> ‚Üí API calls, form submits, button clicks ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ logic chain ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞µ‡∞æ‡∞°‡∞§‡∞æ‡∞Ç.</li>
      </ul>

      <p style={{ marginTop: '2rem', fontWeight: 'bold', color: '#34495e' }}>
        ‚úÖ ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞è concept deep-dive ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞æ? ‡∞≤‡±á‡∞ï Async/Await version ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞æ? Let‚Äôs go to next step! üöÄ
      </p>
    </div>
  );
};

export default PromiseChainingGuide;

import React from 'react';

const ExecutionContextGuide = () => {
  return (
    <div style={{ padding: '2rem', fontFamily: 'Segoe UI, sans-serif', lineHeight: '1.8', backgroundColor: '#f9f9f9' }}>
      <h2 style={{ color: '#005aa7' }}>üî• JavaScript Execution Context & Call Stack ‚Äì In-Depth Guide (Telugu)</h2>

      {/* 1. Execution Context */}
      <h3 style={{ color: '#0d7c8c' }}>1Ô∏è‚É£ Execution Context ‡∞Ö‡∞Ç‡∞ü‡±á ‡∞è‡∞Ç‡∞ü‡∞ø?</h3>
      <p>
        Execution Context ‡∞Ö‡∞®‡±á‡∞¶‡∞ø JavaScript code ‡∞é‡∞ï‡±ç‡∞ï‡∞° ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞é‡∞≤‡∞æ execute ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡±ã define ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
        ‡∞á‡∞¶‡∞ø ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å‡∞ó‡∞æ ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø:
      </p>
      <ul>
        <li><strong>Global Execution Context (GEC)</strong> ‚Äì Entire script execution ‡∞ï‡±ã‡∞∏‡∞Ç.</li>
        <li><strong>Function Execution Context (FEC)</strong> ‚Äì Function call ‡∞Ö‡∞Ø‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å create ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</li>
      </ul>

      <pre style={{ background: '#eee', padding: '1rem' }}>
        <code>{`function greet() {
  var msg = "Hello!";
  console.log(msg);
}
greet();`}</code>
      </pre>
      <p>‡∞í‡∞ï‡±ç‡∞ï‡±ã function call ‡∞ï‡∞ø ‡∞ï‡±ä‡∞§‡±ç‡∞§ Execution Context ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</p>

      {/* 2. Call Stack */}
      <h3 style={{ color: '#0d7c8c' }}>2Ô∏è‚É£ Call Stack ‡∞é‡∞≤‡∞æ Work ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø?</h3>
      <p>
        JavaScript uses a <strong>Call Stack</strong> to manage execution contexts.
        Functions call ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞®‡±ç‡∞® ‡∞ï‡±ç‡∞∞‡∞Æ‡∞Ç‡∞≤‡±ã stack ‡∞≤‡±ã push ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. Complete ‡∞Ö‡∞Ø‡∞ø‡∞§‡±á pop ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
      </p>

      <pre style={{ background: '#eee', padding: '1rem' }}>
        <code>{`function a() {
  b();
}
function b() {
  c();
}
function c() {
  console.log("Inside C");
}
a();`}</code>
      </pre>
      <p>Call Stack:</p>
      <ul>
        <li>Global ‚Üí a() ‚Üí b() ‚Üí c()</li>
        <li>Then reverse ‡∞≤‡±ã pop ‡∞Ö‡∞µ‡±Å‡∞§‡∞æ‡∞Ø‡∞ø.</li>
      </ul>

      {/* 3. Hoisting */}
      <h3 style={{ color: '#0d7c8c' }}>3Ô∏è‚É£ Hoisting ‡∞Ö‡∞Ç‡∞ü‡±á ‡∞è‡∞Ç‡∞ü‡∞ø?</h3>
      <p>
        JavaScript ‡∞≤‡±ã variables & functions <strong>top ‡∞ï‡±Å move ‡∞Ö‡∞µ‡±Å‡∞§‡∞æ‡∞Ø‡∞ø</strong> compilation time ‡∞≤‡±ã. ‡∞á‡∞¶‡∞ø Hoisting.
      </p>
      <pre style={{ background: '#eee', padding: '1rem' }}>
        <code>{`console.log(a); // undefined
var a = 10;

hoisted();
function hoisted() {
  console.log("Function Hoisted!");
}`}</code>
      </pre>
      <p><strong>var</strong> ‚Üí undefined ‡∞ó‡∞æ hoist ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.  
        <strong>let/const</strong> ‚Üí Temporal Dead Zone ‡∞≤‡±ã ‡∞â‡∞Ç‡∞ü‡∞æ‡∞Ø‡∞ø (Reference Error ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø).
      </p>

      {/* 4. Synchronous vs Asynchronous */}
      <h3 style={{ color: '#0d7c8c' }}>4Ô∏è‚É£ Synchronous vs Asynchronous Execution</h3>
      <p>
        JavaScript is <strong>synchronous & single-threaded</strong>. ‡∞ï‡∞æ‡∞®‡±Ä async operations ‡∞§‡±ã non-blocking behavior ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
      </p>

      <pre style={{ background: '#eee', padding: '1rem' }}>
        <code>{`console.log("Start");
setTimeout(() => {
  console.log("Async Task");
}, 1000);
console.log("End");`}</code>
      </pre>
      <p><strong>Output:</strong> Start ‚Üí End ‚Üí Async Task</p>

      {/* 5. Real-Time Use Case */}
      <h3 style={{ color: '#0d7c8c' }}>5Ô∏è‚É£ Real-Time Use Case</h3>
      <p>
        Execution Context, Call Stack, Hoisting, Async knowledge ‡∞µ‡∞≤‡±ç‡∞≤ ‡∞Æ‡±Ä‡∞ï‡±Å:
      </p>
      <ul>
        <li>Bug-free functions handle ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç</li>
        <li>Async calls ‡∞ï‡∞ø proper sequencing plan ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç</li>
        <li>React useEffect ‡∞≤‡±ã dependencies understand ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç</li>
      </ul>

      <p style={{ marginTop: '2rem', fontWeight: 'bold', color: '#005aa7' }}>
        üîÅ Next Step: <strong>‚öõÔ∏è React State & Complex Data Updates</strong> JSX Guide ‡∞ï‡±ä‡∞∞‡∞ï‡±Å "ok" ‡∞Ö‡∞®‡∞Ç‡∞°‡∞ø!
      </p>
    </div>
  );
};

export default ExecutionContextGuide;

const ReactCoreGuide = () => {
    return (
      <div className="p-6 space-y-10">
  
        {/* 1Ô∏è‚É£ React Components (Function vs Class) */}
        <section className="bg-white p-4 rounded-2xl shadow">
          <h2 className="text-2xl font-bold mb-2">1Ô∏è‚É£ React Components (Function vs Class)</h2>
          <p className="mb-2">A <strong>Component</strong> is a reusable block of UI in React. You can create them as <strong>Function Components</strong> or <strong>Class Components</strong>.</p>
  
          <h3 className="text-xl font-semibold mt-4">üëâ Function Component Syntax:</h3>
          <pre className="bg-gray-100 p-2 rounded">
  {`function Welcome(props) {
    return <h1>Hi {props.name}!</h1>;
  }`}</pre>
  
          <h3 className="text-xl font-semibold mt-4">üëâ Class Component Syntax:</h3>
          <pre className="bg-gray-100 p-2 rounded">
  {`class Welcome extends React.Component {
    render() {
      return <h1>Hi {this.props.name}!</h1>;
    }
  }`}</pre>
  
          <p className="mt-4 text-sm text-gray-600">üî§ <strong>Telugu Explanation:</strong> React ‡∞≤‡±ã UI ‡∞®‡∞ø ‡∞ö‡∞ø‡∞®‡±ç‡∞® ‡∞ö‡∞ø‡∞®‡±ç‡∞® reusable parts ‡∞ó‡∞æ ‡∞µ‡∞ø‡∞≠‡∞ú‡∞ø‡∞Ç‡∞ö‡∞ø, ‡∞µ‡∞æ‡∞ü‡∞ø‡∞®‡∞ø Components ‡∞Ö‡∞Ç‡∞ü‡∞æ‡∞∞‡±Å. Function components ‡∞∏‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±ç ‡∞ó ‡∞â‡∞Ç‡∞ü‡∞æ‡∞Ø‡∞ø. Class components ‡∞≤‡±ã state & lifecycle methods ‡∞â‡∞Ç‡∞°‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>
        </section>
  
        {/* 2Ô∏è‚É£ JSX & Rendering Data */}
        <section className="bg-white p-4 rounded-2xl shadow">
          <h2 className="text-2xl font-bold mb-2">2Ô∏è‚É£ JSX & Rendering Data</h2>
          <p>JSX ‡∞Ö‡∞®‡±á‡∞¶‡∞ø JavaScript ‡∞≤‡±ã HTML ‡∞≤‡∞æ‡∞Ç‡∞ü‡∞ø syntax. Under the hood, ‡∞á‡∞¶‡∞ø <code>React.createElement</code> method ‡∞ï‡∞ø convert ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</p>
  
          <h3 className="text-xl font-semibold mt-4">üëâ JSX Example:</h3>
          <pre className="bg-gray-100 p-2 rounded">
  {`const name = "Prasad";
  const element = <h1>Hello, {name}!</h1>;`}</pre>
  
          <p className="mt-4 text-sm text-gray-600">üî§ <strong>Telugu:</strong> JSX ‡∞≤‡±ã curly brackets {`{}`} ‡∞µ‡∞æ‡∞°‡∞ø variables display ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å. JSX ‡∞Æ‡∞®‡∞ï‡∞ø ‡∞°‡±à‡∞®‡∞Æ‡∞ø‡∞ï‡±ç UI ‡∞®‡∞ø ‡∞∏‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±ç ‡∞ó‡∞æ build ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã help ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.</p>
        </section>
  
        {/* 3Ô∏è‚É£ React Props */}
        <section className="bg-white p-4 rounded-2xl shadow">
          <h2 className="text-2xl font-bold mb-2">3Ô∏è‚É£ React Props</h2>
          <p><strong>Props</strong> (short for properties) are used to pass data from parent to child components.</p>
  
          <h3 className="text-xl font-semibold mt-4">üëâ Passing Props:</h3>
          <pre className="bg-gray-100 p-2 rounded">
  {`function Greeting(props) {
    return <h1>Hello, {props.name}!</h1>;
  }
  
  <Greeting name="Sita" />`}</pre>
  
          <h3 className="text-xl font-semibold mt-4">üëâ Destructuring Props:</h3>
          <pre className="bg-gray-100 p-2 rounded">
  {`function Greeting({ name }) {
    return <h1>Hello, {name}!</h1>;
  }`}</pre>
  
          <p className="mt-4 text-sm text-gray-600">üî§ <strong>Telugu:</strong> Props ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ parent ‡∞®‡±Å‡∞Ç‡∞°‡∞ø child ‡∞ï‡∞ø data ‡∞™‡∞Ç‡∞™‡∞µ‡∞ö‡±ç‡∞ö‡±Å. Function parameter ‡∞≤‡±ã destructuring ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç ‡∞µ‡∞≤‡∞® code clean ‡∞ó ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.</p>
        </section>
  
        {/* 4Ô∏è‚É£ React State (useState) */}
        <section className="bg-white p-4 rounded-2xl shadow">
          <h2 className="text-2xl font-bold mb-2">4Ô∏è‚É£ React State (useState)</h2>
          <p><strong>State</strong> ‡∞Ö‡∞®‡±á‡∞¶‡∞ø component ‡∞≤‡±ã dynamic data ‡∞®‡∞ø store ‡∞ö‡±á‡∞∏‡±á‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞™‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. React ‡∞≤‡±ã local state ‡∞®‡∞ø manage ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø <code>useState</code> hook ‡∞®‡∞ø ‡∞µ‡∞æ‡∞°‡∞§‡∞æ‡∞Ç.</p>
  
          <h3 className="text-xl font-semibold mt-4">üëâ Basic Counter Example:</h3>
          <pre className="bg-gray-100 p-2 rounded">
  {`import { useState } from 'react';
  
  function Counter() {
    const [count, setCount] = useState(0);
  
    return (
      <div>
        <h2>Count: {count}</h2>
        <button onClick={() => setCount(count + 1)}>Increment</button>
      </div>
    );
  }`}</pre>
  
          <h3 className="text-xl font-semibold mt-4">üëâ Input Form Example:</h3>
          <pre className="bg-gray-100 p-2 rounded">
  {`function NameForm() {
    const [name, setName] = useState('');
  
    return (
      <div>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Enter your name"
        />
        <p>Hello, {name}</p>
      </div>
    );
  }`}</pre>
  
          <h3 className="text-xl font-semibold mt-4">üëâ Real-time Large Project Use Case:</h3>
          <p>Imagine a product page with quantity counter, input fields, and toggle buttons ‚Äì each of these can be managed with <code>useState</code>.</p>
          <pre className="bg-gray-100 p-2 rounded">
  {`const [quantity, setQuantity] = useState(1);
  const [note, setNote] = useState('');
  const [isGift, setIsGift] = useState(false);`}</pre>
  
          <p className="mt-4 text-sm text-gray-600">üî§ <strong>Telugu:</strong> State ‡∞Ö‡∞®‡±á‡∞¶‡∞ø UI ‡∞≤‡±ã ‡∞Æ‡∞æ‡∞∞‡±á data ‡∞®‡∞ø handle ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡±á. ‡∞Æ‡∞®‡∞Ç local state ‡∞®‡∞ø ‡∞µ‡∞æ‡∞°‡∞ø inputs, counters, toggles ‡∞µ‡∞Ç‡∞ü‡∞ø interactive features build ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å.</p>
        </section>
  
      </div>
    );
  };
  
  export default ReactCoreGuide;
  